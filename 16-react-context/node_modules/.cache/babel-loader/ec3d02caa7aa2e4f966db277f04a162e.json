{"ast":null,"code":"var _jsxFileName = \"/home/izuru/Documents/Code/Pelajaran/Skilvul/Skilvul-Tech4Impact/16-react-context/src/CountContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountContext = /*#__PURE__*/createContext();\n\nconst countReducer = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      {\n        // code here\n        return {\n          count: state.count + 1\n        };\n      }\n\n    case 'decrement':\n      {\n        // code here\n        return {\n          count: state.count - 1\n        };\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action.type}`);\n      }\n  }\n};\n\nconst CountProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // useReducer\n  const [state, dispatch] = React.useReducer(countReducer, {\n    count: 0\n  }); // Make variable `value` and assign state & dispatch\n\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(CountContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CountProvider, \"pKHgYCLjU1VMOjpBXYd+YdajBlg=\");\n\n_c = CountProvider;\n\nconst useCount = () => {\n  _s2();\n\n  // fill the default value of useContext\n  const context = useContext(CountContext);\n\n  if (context === 'undefined') {\n    throw new Error('useCount must be used within a CountProvider');\n  }\n\n  return context;\n};\n\n_s2(useCount, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { CountProvider, useCount };\n\nvar _c;\n\n$RefreshReg$(_c, \"CountProvider\");","map":{"version":3,"sources":["/home/izuru/Documents/Code/Pelajaran/Skilvul/Skilvul-Tech4Impact/16-react-context/src/CountContext.js"],"names":["React","createContext","useContext","useReducer","CountContext","countReducer","state","action","type","count","Error","CountProvider","children","dispatch","value","useCount","context"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,QAAsD,OAAtD;;AAEA,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;;AAEA,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AAAkB;AAChB;AACA,eAAO;AAACC,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAtB,SAAP;AACD;;AAED,SAAK,WAAL;AAAkB;AAChB;AACA,eAAO;AAACA,UAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAtB,SAAP;AACD;;AAED;AAAS;AACP,cAAM,IAAIC,KAAJ,CAAW,0BAAyBH,MAAM,CAACC,IAAK,EAAhD,CAAN;AACD;AAbH;AAeD,CAhBD;;AAkBA,MAAMG,aAAa,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtC;AACA,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBb,KAAK,CAACG,UAAN,CAAiBE,YAAjB,EAA+B;AAACI,IAAAA,KAAK,EAAE;AAAR,GAA/B,CAA1B,CAFsC,CAItC;;AACA,QAAMK,KAAK,GAAG;AAACR,IAAAA,KAAD;AAAQO,IAAAA;AAAR,GAAd;AACA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEC,KAA9B;AAAA,cAAsCF;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAPD;;GAAMD,a;;KAAAA,a;;AASN,MAAMI,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA,QAAMC,OAAO,GAAGd,UAAU,CAACE,YAAD,CAA1B;;AAEA,MAAIY,OAAO,KAAK,WAAhB,EAA6B;AAC3B,UAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAOM,OAAP;AACD,CATD;;IAAMD,Q;;AAWN,SAASJ,aAAT,EAAwBI,QAAxB","sourcesContent":["\nimport React from 'react';\nimport { createContext, useContext, useReducer } from 'react';\n\nconst CountContext = createContext();\n\nconst countReducer = (state, action) => {\n  switch (action.type) {\n    case 'increment': {\n      // code here\n      return {count: state.count + 1 }\n    }\n    \n    case 'decrement': {\n      // code here\n      return {count: state.count - 1 }\n    }\n    \n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`)\n    }\n  }\n}\n\nconst CountProvider = ({ children }) => {\n  // useReducer\n  const [state, dispatch] = React.useReducer(countReducer, {count: 0})\n\n  // Make variable `value` and assign state & dispatch\n  const value = {state, dispatch}\n  return <CountContext.Provider value={value}>{children}</CountContext.Provider>\n}\n\nconst useCount = () => {\n  // fill the default value of useContext\n  const context = useContext(CountContext);\n\n  if (context === 'undefined') {\n    throw new Error('useCount must be used within a CountProvider')\n  }\n\n  return context;\n}\n\nexport { CountProvider, useCount }"]},"metadata":{},"sourceType":"module"}