{"ast":null,"code":"var _jsxFileName = \"/home/izuru/Documents/Code/Pelajaran/Skilvul/Skilvul-Tech4Impact/16-react-context/src/CountContext.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountContext = /*#__PURE__*/createContext();\n\nconst countReducer = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      {// code here\n      }\n\n    case 'decrement':\n      {// code here\n      }\n\n    default:\n      {\n        throw new Error(`Unhandled action type: ${action.type}`);\n      }\n  }\n};\n\nconst CountProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  // useReducer\n  // Make variable `value` and assign state & dispatch\n  return /*#__PURE__*/_jsxDEV(CountContext.Provider, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n\n_c = CountProvider;\n\nconst useCount = () => {\n  _s();\n\n  // fill the default value of useContext\n  const context = useContext();\n\n  if (context === 'undefined') {\n    throw new Error('useCount must be used within a CountProvider');\n  }\n\n  return context;\n};\n\n_s(useCount, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { CountProvider, useCount };\n\nvar _c;\n\n$RefreshReg$(_c, \"CountProvider\");","map":{"version":3,"sources":["/home/izuru/Documents/Code/Pelajaran/Skilvul/Skilvul-Tech4Impact/16-react-context/src/CountContext.js"],"names":["React","createContext","useContext","useReducer","CountContext","countReducer","state","action","type","Error","CountProvider","children","useCount","context"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,QAAsD,OAAtD;;AAEA,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;;AAEA,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AAAkB,OAChB;AACD;;AACD,SAAK,WAAL;AAAkB,OAChB;AACD;;AACD;AAAS;AACP,cAAM,IAAIC,KAAJ,CAAW,0BAAyBF,MAAM,CAACC,IAAK,EAAhD,CAAN;AACD;AATH;AAWD,CAZD;;AAcA,MAAME,aAAa,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtC;AAEA;AAEA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAA,cAAwBA;AAAxB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAND;;KAAMD,a;;AAQN,MAAME,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA,QAAMC,OAAO,GAAGX,UAAU,EAA1B;;AAEA,MAAIW,OAAO,KAAK,WAAhB,EAA6B;AAC3B,UAAM,IAAIJ,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAOI,OAAP;AACD,CATD;;GAAMD,Q;;AAWN,SAASF,aAAT,EAAwBE,QAAxB","sourcesContent":["import React from 'react';\nimport { createContext, useContext, useReducer } from 'react';\n\nconst CountContext = createContext();\n\nconst countReducer = (state, action) => {\n  switch (action.type) {\n    case 'increment': {\n      // code here\n    }\n    case 'decrement': {\n      // code here\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`)\n    }\n  }\n}\n\nconst CountProvider = ({ children }) => {\n  // useReducer\n\n  // Make variable `value` and assign state & dispatch\n\n  return <CountContext.Provider>{children}</CountContext.Provider>\n}\n\nconst useCount = () => {\n  // fill the default value of useContext\n  const context = useContext();\n\n  if (context === 'undefined') {\n    throw new Error('useCount must be used within a CountProvider')\n  }\n\n  return context;\n}\n\nexport { CountProvider, useCount } "]},"metadata":{},"sourceType":"module"}